(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"./src/js/App.jsx":[function(require,module,exports){
// var Parent = require('./Parent');

// React.render(<Parent />, document.getElementById('app'));

var FriendsContainer = React.createClass({displayName: "FriendsContainer",
	getInitialState: function(){
		return {
			name: 'Loading Name',
			searches: []
		}
	},
	getUser: function(username) {
		var self = this;
		$.get('https://api.github.com/users/' + username, function(data) {
			data.name = data.name ? data.name : data.login;
			self.state.searches.push(data);
			self.setState(data);
			console.log(self.state);
		});
	},
	searchUser: function(username){
		this.getUser(username);
	},
	componentDidMount: function(){
		this.getUser('sgengler');
	},
	render: function(){
		return (
			React.createElement("div", null, 
				React.createElement("h3", null, "Name: ", this.state.name), 
				React.createElement("img", {width: 200, className: "img-rounded img-thumbnail", src: this.state.avatar_url}), 
				
				React.createElement(AddFriend, {searchUser: this.searchUser}), 
				React.createElement(SearchList, {searchUser: this.searchUser, searches: this.state.searches})
			)
		)
	}
});

var AddFriend = React.createClass({displayName: "AddFriend",
	getInitialState: function(){
		return {
			searchInput: ''
		}
	},
	updateNewFriend: function(e){
		this.setState({
			searchInput: e.target.value
		});
	},
	handleAddNew: function(e){
		e.preventDefault();
		this.props.searchUser(this.state.searchInput);
		this.setState({
			searchInput: ''
		});
	},
	render: function(){
		return (
			React.createElement("form", {onSubmit: this.handleAddNew}, 
				React.createElement("input", {type: "text", value: this.state.searchInput, onChange: this.updateNewFriend}), 
				React.createElement("button", {type: "submit"}, " Lookup ")
			)
		);
	}
});

var SearchList = React.createClass({displayName: "SearchList",
	getDefaultProps: function(){
		return {
			searches: []
		}
	},
	handleAddNew: function(e){
		this.props.searchUser(e.target.value);
		this.setState({
			searchInput: ''
		});
	},
	render: function(){
		var listItems = this.props.searches.map(function(user){
			return React.createElement("li", null, " ", user.name, " ");
		});
		return (
			React.createElement("div", null, 
				React.createElement("h3", null, " Friends "), 
				React.createElement("ul", null, 
					React.createElement("span", {onClick: this.handleAddNew}, listItems)
				)
			)
		)
	}
});

React.render(React.createElement(FriendsContainer, null), document.getElementById('app'));

},{}]},{},["./src/js/App.jsx"])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvVXNlcnMvZmVuZ2xlci9TaXRlcy9yZWFjdC9zcmMvanMvQXBwLmpzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBLG9DQUFvQzs7QUFFcEMsNERBQTREOztBQUU1RCxJQUFJLHNDQUFzQyxnQ0FBQTtDQUN6QyxlQUFlLEVBQUUsVUFBVTtFQUMxQixPQUFPO0dBQ04sSUFBSSxFQUFFLGNBQWM7R0FDcEIsUUFBUSxFQUFFLEVBQUU7R0FDWjtFQUNEO0NBQ0QsT0FBTyxFQUFFLFNBQVMsUUFBUSxFQUFFO0VBQzNCLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQztFQUNoQixDQUFDLENBQUMsR0FBRyxDQUFDLCtCQUErQixHQUFHLFFBQVEsRUFBRSxTQUFTLElBQUksRUFBRTtHQUNoRSxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO0dBQy9DLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztHQUMvQixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO0dBQ3BCLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0dBQ3hCLENBQUMsQ0FBQztFQUNIO0NBQ0QsVUFBVSxFQUFFLFNBQVMsUUFBUSxDQUFDO0VBQzdCLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7RUFDdkI7Q0FDRCxpQkFBaUIsRUFBRSxVQUFVO0VBQzVCLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7RUFDekI7Q0FDRCxNQUFNLEVBQUUsVUFBVTtFQUNqQjtHQUNDLG9CQUFBLEtBQUksRUFBQSxJQUFDLEVBQUE7SUFDSixvQkFBQSxJQUFHLEVB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QUNILG9CQUFBLE1BQUssRUFBQSxDQUFBLENBQUMsT0FBQSxFQUFPLENBQUUsSUFBSSxDQUFDLFlBQWMsQ0FBQSxFQUFDLFNBQWlCLENBQUE7SUFDaEQsQ0FBQTtHQUNBLENBQUE7R0FDTjtFQUNEO0FBQ0YsQ0FBQyxDQUFDLENBQUM7O0FBRUgsS0FBSyxDQUFDLE1BQU0sQ0FBQyxvQkFBQyxnQkFBZ0IsRUFBQSxJQUFBLENBQUcsQ0FBQSxFQUFFLFFBQVEsQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUMiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiLy8gdmFyIFBhcmVudCA9IHJlcXVpcmUoJy4vUGFyZW50Jyk7XG5cbi8vIFJlYWN0LnJlbmRlcig8UGFyZW50IC8+LCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYXBwJykpO1xuXG52YXIgRnJpZW5kc0NvbnRhaW5lciA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcblx0Z2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbigpe1xuXHRcdHJldHVybiB7XG5cdFx0XHRuYW1lOiAnTG9hZGluZyBOYW1lJyxcblx0XHRcdHNlYXJjaGVzOiBbXVxuXHRcdH1cblx0fSxcblx0Z2V0VXNlcjogZnVuY3Rpb24odXNlcm5hbWUpIHtcblx0XHR2YXIgc2VsZiA9IHRoaXM7XG5cdFx0JC5nZXQoJ2h0dHBzOi8vYXBpLmdpdGh1Yi5jb20vdXNlcnMvJyArIHVzZXJuYW1lLCBmdW5jdGlvbihkYXRhKSB7XG5cdFx0XHRkYXRhLm5hbWUgPSBkYXRhLm5hbWUgPyBkYXRhLm5hbWUgOiBkYXRhLmxvZ2luO1xuXHRcdFx0c2VsZi5zdGF0ZS5zZWFyY2hlcy5wdXNoKGRhdGEpO1xuXHRcdFx0c2VsZi5zZXRTdGF0ZShkYXRhKTtcblx0XHRcdGNvbnNvbGUubG9nKHNlbGYuc3RhdGUpO1xuXHRcdH0pO1xuXHR9LFxuXHRzZWFyY2hVc2VyOiBmdW5jdGlvbih1c2VybmFtZSl7XG5cdFx0dGhpcy5nZXRVc2VyKHVzZXJuYW1lKTtcblx0fSxcblx0Y29tcG9uZW50RGlkTW91bnQ6IGZ1bmN0aW9uKCl7XG5cdFx0dGhpcy5nZXRVc2VyKCdzZ2VuZ2xlcicpO1xuXHR9LFxuXHRyZW5kZXI6IGZ1bmN0aW9uKCl7XG5cdFx0cmV0dXJuIChcblx0XHRcdDxkaXY+XG5cdFx0XHRcdDxoMz5OYW1lOiB7dGhpcy5zdGF0ZS5uYW1lfTwvaDM+XG5cdFx0XHRcdDxpbWcgd2lkdGg9ezIwMH0gY2xhc3NOYW1lPXtcImltZy1yb3VuZGVkIGltZy10aHVtYm5haWxcIn0gc3JjPXt0aGlzLnN0YXRlLmF2YXRhcl91cmx9Lz5cblx0XHRcdFx0XG5cdFx0XHRcdDxBZGRGcmllbmQgc2VhcmNoVXNlcj17dGhpcy5zZWFyY2hVc2VyfSAvPlxuXHRcdFx0XHQ8U2VhcmNoTGlzdCBzZWFyY2hVc2VyPXt0aGlzLnNlYXJjaFVzZXJ9IHNlYXJjaGVzPXt0aGlzLnN0YXRlLnNlYXJjaGVzfSAvPlxuXHRcdFx0PC9kaXY+XG5cdFx0KVxuXHR9XG59KTtcblxudmFyIEFkZEZyaWVuZCA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcblx0Z2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbigpe1xuXHRcdHJldHVybiB7XG5cdFx0XHRzZWFyY2hJbnB1dDogJydcblx0XHR9XG5cdH0sXG5cdHVwZGF0ZU5ld0ZyaWVuZDogZnVuY3Rpb24oZSl7XG5cdFx0dGhpcy5zZXRTdGF0ZSh7XG5cdFx0XHRzZWFyY2hJbnB1dDogZS50YXJnZXQudmFsdWVcblx0XHR9KTtcblx0fSxcblx0aGFuZGxlQWRkTmV3OiBmdW5jdGlvbihlKXtcblx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0dGhpcy5wcm9wcy5zZWFyY2hVc2VyKHRoaXMuc3RhdGUuc2VhcmNoSW5wdXQpO1xuXHRcdHRoaXMuc2V0U3RhdGUoe1xuXHRcdFx0c2VhcmNoSW5wdXQ6ICcnXG5cdFx0fSk7XG5cdH0sXG5cdHJlbmRlcjogZnVuY3Rpb24oKXtcblx0XHRyZXR1cm4gKFxuXHRcdFx0PGZvcm0gb25TdWJtaXQ9e3RoaXMuaGFuZGxlQWRkTmV3fT5cblx0XHRcdFx0PGlucHV0IHR5cGU9XCJ0ZXh0XCIgdmFsdWU9e3RoaXMuc3RhdGUuc2VhcmNoSW5wdXR9IG9uQ2hhbmdlPXt0aGlzLnVwZGF0ZU5ld0ZyaWVuZH0gLz5cblx0XHRcdFx0PGJ1dHRvbiB0eXBlPVwic3VibWl0XCI+IExvb2t1cCA8L2J1dHRvbj5cblx0XHRcdDwvZm9ybT5cblx0XHQpO1xuXHR9XG59KTtcblxudmFyIFNlYXJjaExpc3QgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG5cdGdldERlZmF1bHRQcm9wczogZnVuY3Rpb24oKXtcblx0XHRyZXR1cm4ge1xuXHRcdFx0c2VhcmNoZXM6IFtdXG5cdFx0fVxuXHR9LFxuXHRoYW5kbGVBZGROZXc6IGZ1bmN0aW9uKGUpe1xuXHRcdHRoaXMucHJvcHMuc2VhcmNoVXNlcihlLnRhcmdldC52YWx1ZSk7XG5cdFx0dGhpcy5zZXRTdGF0ZSh7XG5cdFx0XHRzZWFyY2hJbnB1dDogJydcblx0XHR9KTtcblx0fSxcblx0cmVuZGVyOiBmdW5jdGlvbigpe1xuXHRcdHZhciBsaXN0SXRlbXMgPSB0aGlzLnByb3BzLnNlYXJjaGVzLm1hcChmdW5jdGlvbih1c2VyKXtcblx0XHRcdHJldHVybiA8bGk+IHt1c2VyLm5hbWV9IDwvbGk+O1xuXHRcdH0pO1xuXHRcdHJldHVybiAoXG5cdFx0XHQ8ZGl2PlxuXHRcdFx0XHQ8aDM+IEZyaWVuZHMgPC9oMz5cblx0XHRcdFx0PHVsPlxuXHRcdFx0XHRcdDxzcGFuIG9uQ2xpY2s9e3RoaXMuaGFuZGxlQWRkTmV3fT57bGlzdEl0ZW1zfTwvc3Bhbj5cblx0XHRcdFx0PC91bD5cblx0XHRcdDwvZGl2PlxuXHRcdClcblx0fVxufSk7XG5cblJlYWN0LnJlbmRlcig8RnJpZW5kc0NvbnRhaW5lciAvPiwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2FwcCcpKTsiXX0=
